import fc from "fast-check";

/**
 * Script function to compare two fast-check generators by sampling them.
 * @param generatorA The first generator to compare.
 * @param generatorB The second generator to compare.
 * @param numSamples The number of samples to compare.
 * @returns An array of result objects containing the sample number, values
 * generated by each generator, and the match object containing whether the
 * values match and the mismatched items.
 */
export const compareGenerators = (
  generatorA: fc.Arbitrary<any>,
  generatorB: fc.Arbitrary<any>,
  numSamples: number
) => {
  const results = [];
  for (let i = 0; i < numSamples; i++) {
    const seed = 123 * i;

    const valueA = fc.sample(generatorA, { seed: seed });
    const valueB = fc.sample(generatorB, { seed: seed });

    const mismatchedItems = getMismatchedItems(valueA, valueB);

    results.push({ sample: i + 1, valueA, valueB, mismatchedItems });
  }
  return results;
};

/**
 * Utility function to compare two arrays and return mismatched items.
 * @param array1 The first array to compare.
 * @param array2 The second array to compare.
 * @returns An array of mismatched elements. Each element includes the index
 * and the differing values from both arrays.
 */
const getMismatchedItems = (
  array1: any[],
  array2: any[]
): { index: number; val1: any; val2: any }[] => {
  if (array1.length !== array2.length) {
    throw new Error("Different array lengths");
  }

  return array1.reduce((mismatchedItems, val, idx) => {
    if (val !== array2[idx]) {
      mismatchedItems.push({ index: idx, val1: val, val2: array2[idx] });
    }
    return mismatchedItems;
  }, []);
};
