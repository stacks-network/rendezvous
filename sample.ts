import fc from "fast-check";

/**
 * Script function to compare two fast-check generators by sampling them.
 * @param generatorA The first generator to compare.
 * @param generatorB The second generator to compare.
 * @param numSamples The number of samples to compare.
 * @returns An array of result objects containing the sample number, values
 * generated by each generator, and the match object containing whether the
 * values match and the mismatched items.
 */
export const compareGenerators = (
  generatorA: fc.Arbitrary<any>,
  generatorB: fc.Arbitrary<any>,
  numSamples: number
) => {
  const results = [];
  for (let i = 0; i < numSamples; i++) {
    const seed = 123 * i;

    // Generate values.
    const valueA = fc.sample(generatorA, { seed: seed });
    const valueB = fc.sample(generatorB, { seed: seed });

    // Compare outputs.
    const match = arraysMatch(valueA, valueB);

    // Append to the results. They will be returned and logged later.
    results.push({ sample: i + 1, valueA, valueB, match });
  }
  return results;
};

/**
 * Utility function to compare two arrays.
 * @param array1 The first array to compare.
 * @param array2 The second array to compare.
 * @returns An object containing whether the arrays match and the mismatched
 * elements. If the arrays do not match, an error is thrown.
 */
const arraysMatch = (array1: any[], array2: any[]) => {
  if (array1.length !== array2.length)
    throw new Error("Different array lengths");

  const mismatchedItems: { index: number; val1: any; val2: any }[] = [];
  const matches = array1.every((val, idx) => {
    const isMatch = val === array2[idx];
    if (!isMatch)
      mismatchedItems.push({ index: idx, val1: val, val2: array2[idx] });
    return isMatch;
  });

  if (!matches) {
    console.log("Mismatched elements found:", mismatchedItems);
  }
  return { matches: matches, mismatchedItems: mismatchedItems };
};
